From aa805bdbb037047362b3230832bd33cdbb66ff15 Mon Sep 17 00:00:00 2001
From: Sultanxda <sultanxda@gmail.com>
Date: Sat, 24 Aug 2013 17:57:04 -0700
Subject: [PATCH] Squashed commit of the following:
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

commit 9283b0d5430c3f67b17956a0d6ea06170efed2f5
Author: NameLess, the Jedi <yoddah@gmail.com>
Date:   Tue Mar 26 23:12:08 2013 +0100

    Fix the most stupid mistake ever

commit 950dfaf7d68c22d40c6fbb1d7de08b09fb596e06
Author: NameLess, the Jedi <yoddah@gmail.com>
Date:   Fri Mar 22 22:09:02 2013 +0100

    Clean up a bit

commit 910532f20e5aa6c8b98b9e83875abbb26059a7c1
Author: Robert Ramięga <yoddah@gmail.com>
Date:   Thu Feb 21 22:28:00 2013 +0100

    Restore sweep2wake after releasing wakelock. Hopefully this will further minimize possibility of touch screen freezes.

commit e830a93cff20b23156ff4694b31832c9bf4ba0c5
Author: Robert Ramięga <yoddah@gmail.com>
Date:   Tue Feb 19 23:08:35 2013 +0100

    Disable sweep2wake while calling.
    This works around problem of spurious touch events when sweep2wake is active and proxmity sensor turns screen off.
---
 src/com/android/phone/PhoneGlobals.java | 69 +++++++++++++++++++++++++++++++++
 1 file changed, 69 insertions(+)

diff --git a/src/com/android/phone/PhoneGlobals.java b/src/com/android/phone/PhoneGlobals.java
index f7e875d..e6ce404 100644
--- a/src/com/android/phone/PhoneGlobals.java
+++ b/src/com/android/phone/PhoneGlobals.java
@@ -77,6 +77,12 @@
 import com.android.phone.OtaUtils.CdmaOtaScreenState;
 import com.android.server.sip.SipService;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+
 /**
  * Global state for the telephony subsystem when running in the primary
  * phone process.
@@ -267,6 +273,54 @@
     private static final String EXTRA_FROM_NOTIFICATION = "fromNotification";
 
     /**
+     * sweep2wake workaround
+     */
+    private static boolean mSweep2WakeCapable = false;
+    private String mSweep2WakeState;
+    private static final String SWEEP2WAKE_FILE = "/sys/android_touch/sweep2wake";
+
+    private static void checkSweep2WakeCapability () {
+        if (new File(SWEEP2WAKE_FILE).exists()) {
+            mSweep2WakeCapable = true;
+        }
+    }
+
+    private static String getSweep2WakeState() {
+        BufferedReader br;
+        String state = null;
+
+        try {
+            br = new BufferedReader(new FileReader(SWEEP2WAKE_FILE), 512);
+            try {
+                state = br.readLine();
+            } finally {
+                br.close();
+            }
+        } catch (Exception e) {
+            Log.e(LOG_TAG, "I/O exception while reading sweep2wake file", e);
+        }
+        return state;
+    }
+
+    private static boolean setSweep2WakeState(String state) {
+        try {
+            FileWriter fw = new FileWriter(SWEEP2WAKE_FILE);
+            try {
+                fw.write(state + "\n");
+            } finally {
+                fw.close();
+            }
+
+        } catch (IOException e) {
+            Log.e(LOG_TAG, "I/O exception while writing to sweep2wake file", e);
+            return false;
+        }
+        return true;
+    }
+
+
+
+    /**
      * Set the restore mute state flag. Used when we are setting the mute state
      * OUTSIDE of user interaction {@link PhoneUtils#startNewCall(Phone)}
      */
@@ -451,6 +505,9 @@ public void onCreate() {
         // sVoiceCapable =
         //   getPackageManager().hasSystemFeature(PackageManager.FEATURE_TELEPHONY_VOICE_CALLS);
 
+        // Check if sweep2wake is valid option
+        checkSweep2WakeCapability();
+
         if (phone == null) {
             // Initialize the telephony framework
             PhoneFactory.makeDefaultPhones(this);
@@ -1195,6 +1252,11 @@ ProgressDialog getPUKEntryProgressDialog() {
                     // Phone is in use!  Arrange for the screen to turn off
                     // automatically when the sensor detects a close object.
                     if (!mProximityWakeLock.isHeld()) {
+                        if (mSweep2WakeCapable) {
+                            mSweep2WakeState = getSweep2WakeState();
+                            // Disable sweep2wake
+                            setSweep2WakeState("0");
+                        }
                         if (DBG) Log.d(LOG_TAG, "updateProximitySensorMode: acquiring...");
                         mProximityWakeLock.acquire();
                     } else {
@@ -1211,6 +1273,13 @@ ProgressDialog getPUKEntryProgressDialog() {
                         int flags =
                             (screenOnImmediately ? 0 : PowerManager.WAIT_FOR_PROXIMITY_NEGATIVE);
                         mProximityWakeLock.release(flags);
+                        if (mSweep2WakeCapable) {
+                            if (mSweep2WakeState != null && setSweep2WakeState(mSweep2WakeState)) {
+                                Log.d(LOG_TAG, "Restored sweep2wake state");
+                            } else {
+                                Log.d(LOG_TAG, "Failed to restore sweep2wake state");
+                            }
+                        }
                     } else {
                         if (VDBG) {
                             Log.d(LOG_TAG, "updateProximitySensorMode: lock already released.");
-- 
1.8.1.6

